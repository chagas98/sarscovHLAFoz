axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.text.x=element_text(size=15),
axis.ticks.y = element_blank(),
axis.line.y = element_blank(),
axis.line.x.bottom = element_line(color = "black",
linewidth = 1.5,
linetype = 1),
panel.grid.major.x = element_line(color = "gray",
linewidth = 0.5,
linetype = 1),
plot.margin = unit(c(1,-1,1,0), "mm")) +
scale_x_discrete(drop=FALSE) +
scale_y_continuous(#breaks = seq(0,100,20),
trans = scales::reverse_trans()) +
coord_flip()
g5 <- ggplot(data = impact_only_loss, aes(x = factor(gene, genes_sorted), fill = impact)) +xlab(NULL)+
geom_histogram(stat = "count") +
scale_fill_manual(values = c("red", "salmon")) +
labs(x=NULL,
fill = 'Efeito') +
theme_classic() +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.text.x=element_text(size=15),
axis.ticks.y = element_blank(),
axis.line.y.left = element_blank(),
axis.line.x.bottom = element_line(color = "black",
linewidth = 1.5,
linetype = 1),
panel.grid.major.x = element_line(color = "gray",
linewidth = 0.5,
linetype = 1),
plot.margin = unit(c(1,0,1,-1), "mm")
) +
scale_x_discrete(drop=FALSE) +
scale_y_continuous(labels = scales::label_number(accuracy = 1),
limits = c(0,4)) +
coord_flip()
fig1A <- g4  + g.mid2 + g5 + plot_layout(ncol=3, widths = c(4,1.4,4))
fig1A
g7_sup <- ggplot(data = impact_dataset_loss_all_sup, aes(x = factor(variant_lineage, detection_sorted), fill = impact)) +
geom_histogram(stat = "count") +
scale_fill_manual(values = c("red", "salmon")) +
labs(x=NULL) +
theme_classic() +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.text.x=element_text(size=15),
axis.ticks.y = element_blank(),
axis.line.y.left = element_blank(),
axis.line.x.bottom = element_line(color = "black",
linewidth = 1.5,
linetype = 1),
panel.grid.major.x = element_line(color = "gray",
linewidth = 0.5,
linetype = 1),
plot.margin = unit(c(0,0,0,0), "mm")
) +
scale_x_discrete(drop=FALSE) +
scale_y_continuous(labels = scales::label_number(accuracy = 1),
limits = c(0,33)) +
coord_flip()
fig1B_sup <- g6_sup  + g.mid3_sup  + g7_sup + plot_layout(ncol=3, widths = c(4,1.4,4))
fig1B_sup
g.mid_sup <- ggplot(unique_alleles,aes(x=1,y=factor(alleles, alleles_sorted)))+
geom_text(aes(label=alleles, fontface='plain', family='sans'),
size=4.5)+
ggtitle("")+
ylab(NULL)+
scale_x_continuous(expand=c(0,0),limits=c(0.99,1.01))+
theme(axis.title=element_blank(),
panel.grid=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
panel.background=element_blank(),
axis.text.x=element_text(color=NA),
axis.ticks.x=element_line(color=NA),
plot.margin = unit(c(-5,-1, 1,-1), "mm"))
g1_sup <- ggplot(data = impact_dataset_gain,
aes(x = factor(alleles, alleles_sorted),
fill = impact)) +
geom_histogram(stat = "count") +
scale_fill_manual(values = c("gray30", "gray80")) +
labs(x=NULL,
fill = 'Efeito') +
theme_classic() +
theme(legend.position="left",
legend.title = element_text(face="bold", size=15),
legend.text =  element_text(face= "italic", size=14),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.text.x=element_text(size=15),
axis.ticks.y = element_blank(),
axis.line.y = element_blank(),
axis.line.x.bottom = element_line(color = "black",
linewidth = 1.5,
linetype = 1),
panel.grid.major.x = element_line(color = "gray",
linewidth = 0.5,
linetype = 1),
plot.margin = unit(c(1,-1,1,0), "mm")) +
scale_x_discrete(drop=FALSE) +
scale_y_continuous(#breaks = seq(0,35,10),
trans = scales::reverse_trans()) +
coord_flip()
g2_sup <- ggplot(data = impact_dataset_loss,
aes(x = factor(alleles, alleles_sorted),
fill = impact)) +
geom_histogram(stat = "count") +
scale_fill_manual(values = c("red", "salmon")) +
labs(x=NULL,
fill = 'Efeito') +
theme_classic() +
theme(legend.title = element_text(face="bold", size=15),
legend.text =  element_text(face= "italic", size=14),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.text.x=element_text(size=15),
axis.ticks.y = element_blank(),
axis.line.y.left = element_blank(),
axis.line.x.bottom = element_line(color = "black",
linewidth = 1.5,
linetype = 1),
panel.grid.major.x = element_line(color = "gray",
linewidth = 0.5,
linetype = 1),
plot.margin = unit(c(1,0,1,-1), "mm")
) +
scale_x_discrete(drop=FALSE) +
scale_y_continuous(labels = scales::label_number(accuracy = 1),
limits = c(0,18)) +
coord_flip()
fig1C_sup <- (g1_sup + g.mid_sup + g2_sup)  + plot_layout(ncol=3, widths = c(4,1.4,4), guides = "collect")
fig1C_sup
fig1_sup <- (wrap_elements(fig1A_sup) | plot_spacer() | wrap_elements(fig1B_sup) | plot_spacer() | wrap_elements(fig1C_sup))  +
plot_layout(ncol=5, widths = c(1.3/5, 0.0005/5, 1.5/5, 0.0005/5, 1.7/5)) +
plot_annotation(tag_levels = list(c("A", "B", "C"))) &
theme(plot.tag = element_text(size = 26))
### final plot
fig1_sup
ggsave('Fig1_sup.png', fig1_sup, height = 25, width = 50, scale = 1,  units = "cm")
mutation_dataset <- impact_dataset_all %>%
deduplicating(data = ., columns = c("variant_protein_sorted", "gene", "variant_lineage")) %>%
group_by(pos,gene,variant_protein_sorted) %>%
count()
# Plot
fig2A <- ggplot(mutation_dataset, aes(x=pos, y=n)) +
geom_segment(
aes(x=pos, xend=pos, y=0, yend=n),
color=ifelse(mutation_dataset$n > 20, "orange", "grey"),
linewidth=ifelse(mutation_dataset$n > 10, 1, 0.7)
) +
geom_point(
color=ifelse(mutation_dataset$n > 20, "orange", "grey"),
size=ifelse(mutation_dataset$n > 20, 4, 2)
) +
geom_point(data=filter(mutation_dataset, variant_protein_sorted %in% impact_only_loss$variant_protein_sorted),
color="red",
size=2
) +
geom_point(data=filter(mutation_dataset_spike, variant_protein_sorted %in% impact_only_weakloss$variant_protein_sorted),
color="salmon",
size=2
) +
geom_point(data=filter(mutation_dataset, variant_protein_sorted %in% impact_only_gain$variant_protein_sorted),
color="gray30",
size=2
) +
#  geom_text_repel(data=filter(mutation_dataset, n>10),
#                  aes(label=variant_protein_sorted),
#                  max.overlaps = Inf,
#                  min.segment.length = 10, seed = 42, point.padding = 3,
#                  max.time = 1, max.iter = 1e5,
#                  direction = "x",
#                 color='orange'
# ) +
theme_classic() +
theme(legend.position = "none",
axis.title.x = element_text(size=16),
axis.title.y = element_text(size=14),
axis.text.y = element_text(size=13),
axis.text.x=element_text(size=13),
axis.ticks.y = element_blank(),) +
scale_y_continuous(limits = c(0, 35), breaks=seq(0, 35, 5), expand = c(0,0)) +
scale_x_continuous(breaks=seq(0, 30000, 5000)) +
ylab("Frequência de Mutações") +
xlab("Posição (Nucleotídeos)")
fig2A
ggsave('Fig2A.png', fig2A, height = 10, width = 26, scale = 1,  units = "cm")
mutation_dataset_spike <-  mutation_dataset %>%
filter(gene == 'S') %>%
mutate(prot_pos = as.numeric(map(variant_protein_sorted, parse_number)))
paste0(mutation_dataset_spike$prot_pos, collapse = ' resid ')
fig2B <- ggplot(mutation_dataset_spike, aes(x=prot_pos, y=n)) +
geom_segment(
aes(x=prot_pos, xend=prot_pos, y=0, yend=n),
color=ifelse(mutation_dataset_spike$n > 20, "orange", "grey"),
size=ifelse(mutation_dataset_spike$n > 20, 1, 0.7)
) +
geom_point(
color=ifelse(mutation_dataset_spike$n > 20, "orange", "grey"),
size=ifelse(mutation_dataset_spike$n > 20, 4, 2)
) +
geom_point(data=filter(mutation_dataset_spike, variant_protein_sorted %in% impact_only_loss$variant_protein_sorted),
color="red",
size=2
) +
geom_point(data=filter(mutation_dataset_spike, variant_protein_sorted %in% impact_only_weakloss$variant_protein_sorted),
color="salmon",
size=2
) +
geom_point(data=filter(mutation_dataset_spike, variant_protein_sorted %in% impact_only_gain$variant_protein_sorted),
color="gray30",
size=2
) +
geom_text_repel(data=filter(mutation_dataset_spike, n>20 && !(variant_protein_sorted %in% impact_only_loss$variant_protein_sorted)),
aes(label=variant_protein_sorted),
max.overlaps = Inf,
min.segment.length = 10, seed = 42, point.padding = 3,
max.time = 2, max.iter = 1e5,
#direction = "x",
size = 5,
color='orange'
) +
geom_text_repel(data=filter(mutation_dataset_spike, variant_protein_sorted %in% impact_only_loss$variant_protein_sorted),
aes(label=variant_protein_sorted),
size = 5,
color="red"
) +
geom_text_repel(data=filter(mutation_dataset_spike, variant_protein_sorted %in% impact_only_weakloss$variant_protein_sorted),
aes(label=variant_protein_sorted),
size=5,
color="salmon"
) +
theme_classic() +
theme(legend.position = "none",
axis.title.x = element_text(size=17),
axis.title.y = element_text(size=14),
axis.text.y = element_text(size=14),
axis.text.x=element_text(size=14),
plot.margin = unit(c(7,6,5,6), "mm")
) +
scale_y_continuous(limits = c(0, 35), breaks=seq(0, 35, 5), expand = c(0,0)) +
scale_x_continuous(limits = c(0, 1273), breaks=seq(0, 1200, 200), expand = c(0,0)) +
ylab("Frequência de Mutações") +
xlab("Resíduos")
fig2B
ggsave('Fig2B.png', fig2B, height = 9, width = 30, scale = 1,  units = "cm")
mutation_dataset_spike
alleles_binned <- patients %>%
filter(HospitalPeriod_days < 65)  %>%
mutate(month_year = format(as.Date(Hospital_admission), "%m-%Y")) %>%
select(allele1, allele2, month_year) %>%
pivot_longer(cols = c(allele1, allele2),
names_to = 'type',
values_to = 'alleles') %>%
count(alleles) %>%
group_by(alleles) %>%
mutate(alleles = ifelse(n < 10, "Outros", alleles)) %>%
ungroup()
alleles_binned$alleles
# Select patients
patients_date <- patients %>%
filter(HospitalPeriod_days < 65) %>%
mutate(month_year = format(as.Date(Hospital_admission), "%m-%Y")) %>%
select(allele1, allele2, month_year) %>%
pivot_longer(cols = c(allele1, allele2),
names_to = 'type',
values_to = 'alleles') %>%
mutate(alleles = ifelse(alleles %in% alleles_binned$alleles, alleles, "Outros")) %>%
count(alleles, month_year) %>%
group_by(month_year) %>%
mutate(prop = prop.table(n)*100)
# Get Colors
colourCount_variants = length(unique(lineage_date$Lineage))
getPalette_variants = colorRampPalette(brewer.pal(9, "Set1"))
plot_count_variants <-
ggplot(lineage_date, aes(x = lubridate::my(month_year), y = n)) +
geom_bar(stat = "identity") +
labs(x = "", y = "") +
scale_x_date(
date_breaks = '1 month',
date_labels = "%b-%Y",
expand = c(0.01, 0)
) +
theme_linedraw() +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.margin = margin(0, 0, 0, 0, "mm")
)
plot_variants_month <-
ggplot(lineage_date, aes(
x = lubridate::my(month_year),
y = prop,
fill = factor(Lineage, detection_sorted)
)) +
geom_bar(stat = "identity",  colour = "black") +
labs(x = "",
y = "Prevalência Relativa (%)") +
scale_fill_manual('Variantes \n SARS-CoV-2',
values = getPalette_variants(colourCount_variants)
) +
scale_x_date(
date_breaks = '1 month',
date_labels = "%b-%Y",
expand = c(0.01, 0)
) +
scale_y_continuous(expand = c(0.01, 0)) +
theme_classic() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
axis.line.x = element_blank(),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14),
legend.title = element_text(face = "bold", size = 13),
legend.text = element_text(size = 10),
legend.title.align = 0.3,
panel.grid = element_blank(),
panel.background = element_blank()
)
# get colors
colourCount_alleles = length(unique(patients_date$alleles))
getPalette_alleles = colorRampPalette(brewer.pal(9, "BrBG"))
# extend x axis based on variants
break.vec <- range(as.Date("01-03-2020", format="%d-%m-%Y"), as.Date("01-12-2022", format="%d-%m-%Y"))
patients_date
plot_count_alleles <-
ggplot(patients_date, aes(x = lubridate::my(month_year), y = n)) +
geom_bar(stat = "identity") +
labs(x = "", y = "") +
scale_x_date(
limits = break.vec,
date_breaks = '1 month',
date_labels = "%b-%Y",
expand = c(0.025, 0)
) +
theme_linedraw() +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.margin = margin(0, 0, 0, 0, "mm")
)
plot_alleles_month <- ggplot(patients_date, aes(x = lubridate::my(month_year), y = prop, fill=alleles)) +
geom_bar(stat = "identity", colour='black') +
labs( x = "",
y = "Prevalência Relativa (%)") +
scale_x_date(limits = break.vec, date_breaks = '1 month', date_labels = "%b-%Y", expand = c(0.025,0)) +
scale_fill_manual('Alelos', values = getPalette_alleles(colourCount_alleles)) +
scale_y_continuous(expand = c(0.01,0)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
axis.line.x = element_blank(),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14),
legend.title = element_text(face = "bold", size = 11),
legend.text = element_text(size = 9),
legend.title.align = 0.2,
panel.grid=element_blank(),
panel.background=element_blank())
fig5 <- plot_count_variants +
plot_variants_month +
plot_count_alleles +
plot_alleles_month +
plot_layout(ncol=1, heights = c(1, 6, 1, 2.5), guides = "auto") +
plot_annotation(tag_levels = list(c("A", "", "B", "")))
fig5
ggsave('Fig5.png', fig5, height = 25, width = 36, scale = 0.8,  units = "cm")
lineage_date
impact_dataset_all$fold_change <- log2(impact_dataset_all$rank_values_mutant / impact_dataset_all$rank_values_refseq)
FC_loss_all <- impact_dataset_all %>%
dplyr::mutate(fold_change = log2(rank_values_mutant / rank_values_refseq)) %>%
dplyr::filter(impact %in% c('Loss', 'Weak Loss'))
muh_grob <- grid::rectGrob(
x=0, y=1:34, gp=gpar(
color='white', fill= getPalette_variants(colourCount_variants), alpha=0.8))
colourCount_alleles = length(unique(impact_dataset_all$alleles))
getPalette_alleles = colorRampPalette(brewer.pal(11, "BrBG"))
fig6 <- ggplot(FC_loss_all)+
ggnewscale::new_scale_colour()+
geom_point(aes(x = fold_change, y = factor(variant_lineage, detection_sorted),
colour = alleles, shape=factor(length)),
size = 4,
fill = NA,
stroke=1) +
geom_text_repel(data=distinct(FC_loss_all, variant_protein_sorted,  .keep_all = TRUE), aes(x=fold_change, y= factor(variant_lineage, detection_sorted), label=variant_protein_sorted, fontface='plain', family='sans'),
size=3,   max.overlaps = Inf,
min.segment.length = 10, seed = 42, point.padding = 3,
max.time = 2, max.iter = 1e5,
direction = "x")+
labs(x=expression(phantom()*Log[2]*FC),
y = '',
shape="K-mers") +
coord_cartesian(clip='off') +
theme(
plot.title = element_text(size=14, face= "bold", colour= "black" ),
axis.title.x = element_text(size=14, face="bold", colour = "black"),
axis.title.y = element_text(size=14, face="bold", colour = "black"),
axis.text.x = element_text(size=15, face="bold", colour = "black"),
axis.text.y = element_text(size=10, face="bold", colour = "white"),
legend.title = element_text(face = "bold", size=13),
legend.text =  element_text(size=12),
legend.title.align = 0.4,
panel.background = element_rect(fill = "white"),
panel.grid = element_line(color = "grey70")
) +
scale_colour_manual('Alelos', values = getPalette_alleles(colourCount_alleles)) +
scale_shape_manual(values = c(0, 1, 2, 5)) +
annotation_custom(
grob=muh_grob, ymin = 0, ymax = 1, xmin = -0.55, xmax=0.25
) +
scale_y_discrete(drop = FALSE)
fig6
ggsave('Fig6.png', fig6, height = 20, width =35, scale = 1,  units = "cm")
impact_dataset_comparative <-  impact_dataset_deduplicate %>%
dplyr::filter(str_detect(impact, 'Loss')) %>%
mutate(paired = row_number(),
impact_geral = case_when(
str_detect(impact, 'Loss') ~ 'Total Loss',
str_detect(impact, 'Gain') ~ 'Total Gain')
) %>%
tidyr::pivot_longer(
cols = contains('rank_values_'),
names_prefix = 'rank_values_',
names_to = 'rank_type') %>%
mutate(log2value = log2(value),
rank_type = case_when(
rank_type=='mutant' ~ 'Mutação',
rank_type=='refseq' ~ 'Referência'
))
fig7 <- ggplot(impact_dataset_comparative, aes(x=rank_type, y=log2value)) +
geom_boxplot(width = 0.3, size = 0.4
) +
geom_signif(comparisons = list(c('Mutação', 'Referência'))
) +
geom_dotplot(
aes(fill = impact_geral),
alpha = 0.7,
dotsize = 2,
binaxis='y', stackdir='center'
) +
geom_line(aes(group = paired),
color = "black",
alpha = 0.5
) +
scale_fill_manual(values = "red") +
labs(y = expression(phantom()*Log[2]*('Afinidade de Ligação')),
fill = 'Efeito') +
theme_bw()+
theme(legend.position = "bottom",
legend.title = element_text(face="bold", size=13),
legend.text =  element_text(face= "italic", size=12),
axis.text.x = element_text(face="bold", size=12),
axis.title.x = element_blank(),
axis.text.y = element_text(size=13),
axis.title.y = element_text(face="bold", size=14),
strip.text.x = element_text(size = 13)
) +
ylim(NA, 10) +
facet_wrap(~alleles)
fig7
ggsave('Fig7.png', fig7, height = 17, width = 25, scale = 1,  units = "cm")
###################################################################################
################################### FIG 8 ########################################
###################################################################################
#devtools::install_github("outbreak-info/R-outbreak-info")
outbreakinfo::authenticateUser()
# quantas mutações por região?
Q1 <- peptides_single %>%
deduplicating(data = .,
columns = c("pos", "gene", "variant_protein_sorted")) %>%
group_by(gene) %>%
tally()
Q1
# quais mutações por região?
Q2 <- impact_dataset_all %>%
deduplicating(data = .,
columns = c("pos", "gene", "variant_lineage", "variant_protein_sorted")) %>%
group_by(gene,pos,variant_protein_sorted,variant_lineage, impact) %>%
tally() %>%
ungroup() %>%
print(n=200)
Q3 <- impact_dataset_loss_all_sup %>%
group_by(gene,pos,variant_protein_sorted, impact, alleles, variant_lineage) %>%
tally() %>%
ungroup() %>%
print(n=200)
impact_dataset_gain_all_sup <- impact_dataset_all %>%
dplyr::filter(impact %in% c('Weak Gain', 'Gain')) %>%
deduplicating(c('variant_lineage', 'gene', 'variant_protein_sorted', "alleles"))
impact_dataset_loss_all_sup <- impact_dataset_all %>%
dplyr::filter(impact %in% c('Weak Loss', 'Loss')) %>%
deduplicating(c('variant_lineage', 'gene', 'variant_protein_sorted', 'alleles'))
Q3 <- impact_dataset_loss_all_sup %>%
group_by(gene,pos,variant_protein_sorted, impact, alleles, variant_lineage) %>%
tally() %>%
ungroup() %>%
print(n=200)
View(Q3)
nrow(impact_dataset_deduplicate)
impact_dataset_deduplicate <- impact_dataset_all %>%
deduplicating(data = .,
columns = c("sequence", "length", "pos", "gene", "alleles", "impact"))
nrow(impact_dataset_deduplicate)
source("~/Documents/UNILA/sarscovHLAFoz/MutationPipeline/results/mutations/analysis.R")
