axis.text.y = element_blank(),
axis.text.x=element_text(size=13),
axis.ticks.y = element_blank(),
axis.line.y.left = element_blank(),
axis.line.x.bottom = element_line(color = "black",
linewidth = 1.5,
linetype = 1),
panel.grid.major.x = element_line(color = "gray",
linewidth = 0.5,
linetype = 1),
plot.margin = unit(c(0,0,0,-0), "mm")
) +
scale_x_discrete(drop=FALSE) +
scale_y_continuous(labels = scales::label_number(accuracy = 1)) +
coord_flip()
fig1B <- g6  + g.mid3  + g7 + plot_layout(ncol=3, widths = c(4,1.4,4))
fig1 <- (wrap_elements(fig1A) | plot_spacer() | wrap_elements(fig1B) | plot_spacer() | wrap_elements(fig1C))  +
plot_layout(ncol=5, widths = c(1.3/5, 0.0005/5, 1.5/5, 0.0005/5, 1.7/5)) +
plot_annotation(tag_levels = list(c("A", "B", "C")))
ggsave('Fig1.png', fig1, height = 14, width = 40, scale = 1,  units = "cm")
g2 <- ggplot(data = impact_dataset_loss,
aes(x = factor(alleles, alleles_sorted),
fill = impact)) +
geom_histogram(stat = "count") +
scale_fill_manual(values = c("red", "salmon")) +
labs(x=NULL,
fill = 'Efeito') +
theme_classic() +
theme(legend.title = element_text(face="bold", size=13),
legend.text =  element_text(face= "italic", size=12),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.text.x=element_text(size=13),
axis.ticks.y = element_blank(),
axis.line.y.left = element_blank(),
axis.line.x.bottom = element_line(color = "black",
linewidth = 1.5,
linetype = 1),
panel.grid.major.x = element_line(color = "gray",
linewidth = 0.5,
linetype = 1),
plot.margin = unit(c(1,0,1,-1), "mm")
) +
scale_x_discrete(drop=FALSE) +
coord_flip()
fig1C <- (g1 + g.mid + g2)  + plot_layout(ncol=3, widths = c(4,1.4,4), guides = "collect")
g3 <- ggplot(data = impact_dataset_noeffect, aes(x = alleles)) +
geom_histogram(stat = "count") +
theme(axis.title.x = element_blank(),
plot.margin = unit(c(1,-1,1,0), "mm"))
g3
###################################################################################
################################### FIG 3 #########################################
###################################################################################
unique_gene <- impact_dataset_deduplicate %>%
select(gene) %>%
distinct()
g.mid2 <- ggplot(unique_gene,aes(x=1,y=factor(gene, genes_sorted))) +
geom_text(aes(label=gene, fontface='plain', family='sans'),
size=3.5)+
ggtitle("")+
ylab(NULL)+
scale_x_continuous(expand=c(0,0),limits=c(0.99,1.01))+
theme(axis.title=element_blank(),
panel.grid=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
panel.background=element_blank(),
axis.text.x=element_text(color=NA),
axis.ticks.x=element_line(color=NA),
plot.margin = unit(c(-5,-1, 1,-1), "mm"))
g4 <- ggplot(data = impact_dataset_gain,
aes(x = factor(gene, genes_sorted),
fill = impact)) +
geom_histogram(stat = "count") +
scale_fill_manual(values = c("gray30", "gray80")) +
labs(x=NULL,
fill = 'Efeito') +
theme_classic() +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.text.x=element_text(size=13),
axis.ticks.y = element_blank(),
axis.line.y = element_blank(),
axis.line.x.bottom = element_line(color = "black",
linewidth = 1.5,
linetype = 1),
panel.grid.major.x = element_line(color = "gray",
linewidth = 0.5,
linetype = 1),
plot.margin = unit(c(1,-1,1,0), "mm")) +
scale_x_discrete(drop=FALSE) +
scale_y_reverse() + coord_flip()
g5 <- ggplot(data = impact_dataset_loss, aes(x = factor(gene, genes_sorted), fill = impact)) +xlab(NULL)+
geom_histogram(stat = "count") +
scale_fill_manual(values = c("red", "salmon")) +
labs(x=NULL,
fill = 'Efeito') +
theme_classic() +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.text.x=element_text(size=13),
axis.ticks.y = element_blank(),
axis.line.y.left = element_blank(),
axis.line.x.bottom = element_line(color = "black",
linewidth = 1.5,
linetype = 1),
panel.grid.major.x = element_line(color = "gray",
linewidth = 0.5,
linetype = 1),
plot.margin = unit(c(1,0,1,-1), "mm")
) +
scale_x_discrete(drop=FALSE) +
coord_flip()
fig1A <- g4  + g.mid2 + g5 + plot_layout(ncol=3, widths = c(4,1.4,4))
impact_dataset  %>%
count(variant_protein_sorted) %>%
print(n=300)
impact_dataset_gain_all <- dplyr::semi_join(
impact_dataset_all,
impact_dataset_gain,
by = c("sequence", "alleles", "variant_protein")
)
impact_dataset_loss_all <- dplyr::semi_join(
impact_dataset_all,
impact_dataset_loss,
by = c("sequence", "alleles", "variant_protein")
)
lineages_names  <- unique(peptides_single$variant_lineage)
lineages_sorted  <- str_sort(lineages_names)
unique_lineage <- impact_dataset_all %>%
select(variant_lineage) %>%
distinct()
g.mid3 <- ggplot(unique_lineage,aes(x=1,y=factor(variant_lineage, detection_sorted))) +
geom_text(aes(label=variant_lineage, fontface='plain', family='sans'),
size=3.5)+
ggtitle("")+
ylab(NULL)+
scale_x_continuous(expand=c(0,0),limits=c(0.99,1.01))+
theme(axis.title=element_blank(),
panel.grid=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
panel.background=element_blank(),
axis.text.x=element_text(color=NA),
axis.ticks.x=element_line(color=NA),
plot.margin = unit(c(-5,-1, 1,-1), "mm"))
g6 <- ggplot(data = impact_dataset_gain_all,
aes(x = factor(variant_lineage, lineages_sorted),
fill = impact)) +
geom_histogram(stat = "count") +
scale_fill_manual(values = c("gray30", "gray80")) +
labs(x=NULL) +
theme_classic() +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.text.x=element_text(size=13),
axis.ticks.y = element_blank(),
axis.line.y = element_blank(),
axis.line.x.bottom = element_line(color = "black",
linewidth = 1.5,
linetype = 1),
panel.grid.major.x = element_line(color = "gray",
linewidth = 0.5,
linetype = 1),
plot.margin = unit(c(0,-0,0,0), "mm")) +
scale_x_discrete(drop=FALSE) +
scale_y_reverse() + coord_flip()
g7 <- ggplot(data = impact_dataset_loss_all, aes(x = factor(variant_lineage, lineages_sorted), fill = impact)) +xlab(NULL)+
geom_histogram(stat = "count") +
scale_fill_manual(values = c("red", "salmon")) +
labs(x=NULL) +
theme_classic() +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.text.x=element_text(size=13),
axis.ticks.y = element_blank(),
axis.line.y.left = element_blank(),
axis.line.x.bottom = element_line(color = "black",
linewidth = 1.5,
linetype = 1),
panel.grid.major.x = element_line(color = "gray",
linewidth = 0.5,
linetype = 1),
plot.margin = unit(c(0,0,0,-0), "mm")
) +
scale_x_discrete(drop=FALSE) +
scale_y_continuous(labels = scales::label_number(accuracy = 1)) +
coord_flip()
fig1B <- g6  + g.mid3  + g7 + plot_layout(ncol=3, widths = c(4,1.4,4))
fig1 <- (wrap_elements(fig1A) | plot_spacer() | wrap_elements(fig1B) | plot_spacer() | wrap_elements(fig1C))  +
plot_layout(ncol=5, widths = c(1.3/5, 0.0005/5, 1.5/5, 0.0005/5, 1.7/5)) +
plot_annotation(tag_levels = list(c("A", "B", "C")))
ggsave('Fig1.png', fig1, height = 14, width = 40, scale = 1,  units = "cm")
detection_sorted  <- metadata_date %>%
group_by(Lineage) %>%
slice(which.min(group_date)) %>%
select(Lineage, first_detection = group_date) %>%
arrange(first_detection) %>%
pull(Lineage)
###################################################################################
################################### FIG 5 #########################################
###################################################################################
metadata <- read.csv('results/mutations/metadata_info.csv', sep=',')
patients <- read.csv('results/raw_data/patients_hla.csv', sep=',')
metadata_date <- metadata %>%
group_by(Date) %>%
mutate(month_year = format(as.Date(Date), "%m-%Y"),
year = format(as.Date(Date), "%Y"),
group_date = cur_group_id()
) %>%
ungroup()
detection_sorted  <- metadata_date %>%
group_by(Lineage) %>%
slice(which.min(group_date)) %>%
select(Lineage, first_detection = group_date) %>%
arrange(first_detection) %>%
pull(Lineage)
lineage_date <- metadata_date %>%
count(Lineage, month_year) %>%
group_by(month_year) %>%
mutate(prop = prop.table(n)*100)
lineages_names  <- unique(peptides_single$variant_lineage)
lineages_sorted  <- str_sort(lineages_names)
unique_lineage <- impact_dataset_all %>%
select(variant_lineage) %>%
distinct()
g.mid3 <- ggplot(unique_lineage,aes(x=1,y=factor(variant_lineage, detection_sorted))) +
geom_text(aes(label=variant_lineage, fontface='plain', family='sans'),
size=3.5)+
ggtitle("")+
ylab(NULL)+
scale_x_continuous(expand=c(0,0),limits=c(0.99,1.01))+
theme(axis.title=element_blank(),
panel.grid=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
panel.background=element_blank(),
axis.text.x=element_text(color=NA),
axis.ticks.x=element_line(color=NA),
plot.margin = unit(c(-5,-1, 1,-1), "mm"))
g6 <- ggplot(data = impact_dataset_gain_all,
aes(x = factor(variant_lineage, lineages_sorted),
fill = impact)) +
geom_histogram(stat = "count") +
scale_fill_manual(values = c("gray30", "gray80")) +
labs(x=NULL) +
theme_classic() +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.text.x=element_text(size=13),
axis.ticks.y = element_blank(),
axis.line.y = element_blank(),
axis.line.x.bottom = element_line(color = "black",
linewidth = 1.5,
linetype = 1),
panel.grid.major.x = element_line(color = "gray",
linewidth = 0.5,
linetype = 1),
plot.margin = unit(c(0,-0,0,0), "mm")) +
scale_x_discrete(drop=FALSE) +
scale_y_reverse() + coord_flip()
g7 <- ggplot(data = impact_dataset_loss_all, aes(x = factor(variant_lineage, lineages_sorted), fill = impact)) +xlab(NULL)+
geom_histogram(stat = "count") +
scale_fill_manual(values = c("red", "salmon")) +
labs(x=NULL) +
theme_classic() +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.text.x=element_text(size=13),
axis.ticks.y = element_blank(),
axis.line.y.left = element_blank(),
axis.line.x.bottom = element_line(color = "black",
linewidth = 1.5,
linetype = 1),
panel.grid.major.x = element_line(color = "gray",
linewidth = 0.5,
linetype = 1),
plot.margin = unit(c(0,0,0,-0), "mm")
) +
scale_x_discrete(drop=FALSE) +
scale_y_continuous(labels = scales::label_number(accuracy = 1)) +
coord_flip()
fig1B <- g6  + g.mid3  + g7 + plot_layout(ncol=3, widths = c(4,1.4,4))
fig1 <- (wrap_elements(fig1A) | plot_spacer() | wrap_elements(fig1B) | plot_spacer() | wrap_elements(fig1C))  +
plot_layout(ncol=5, widths = c(1.3/5, 0.0005/5, 1.5/5, 0.0005/5, 1.7/5)) +
plot_annotation(tag_levels = list(c("A", "B", "C")))
ggsave('Fig1.png', fig1, height = 14, width = 40, scale = 1,  units = "cm")
View(impact_dataset_deduplicate)
peptides_deduplicate
impact_dataset_deduplicate %>%
deduplicating(data = .,
columns = c("sequence", "length",
"pos", "gene")) #variant_protein possui grupos de variantes iguais
mutation_dataset <- impact_dataset_deduplicate %>%
deduplicating(data = ., columns = c("variant_protein_sorted", "pos")) %>%
print()
mutation_dataset <- impact_dataset_deduplicate %>%
deduplicating(data = ., columns = c("variant_protein_sorted", "pos")) %>%
group_by("gene") %>%
n()
mutation_dataset <- impact_dataset_deduplicate %>%
deduplicating(data = ., columns = c("variant_protein_sorted", "pos")) %>%
group_by(gene) %>%
n()
mutation_dataset <- impact_dataset_deduplicate %>%
deduplicating(data = ., columns = c("variant_protein_sorted", "pos")) %>%
group_by(gene) %>%
count()
mutation_dataset
mutation_dataset <- impact_dataset_deduplicate %>%
deduplicating(data = ., columns = c("variant_protein_sorted", "gene", "pos")) %>%
group_by(gene) %>%
count()
mutation_dataset
mutation_dataset <- impact_dataset_deduplicate %>%
deduplicating(data = ., columns = c("variant_protein_sorted", "gene")) %>%
group_by(gene) %>%
count()
mutation_dataset
mutation_dataset <- impact_dataset_deduplicate %>%
deduplicating(data = ., columns = c("variant_protein_sorted", "gene")) %>%
select(pos, gene, variant_protein_sorted)
mutation_dataset
View(impact_dataset_all)
mutation_dataset <- impact_dataset_all %>%
deduplicating(data = ., columns = c("variant_protein_sorted", "gene", "variant_lineage")) %>%
group_by(variant_protein_sorted, variant_lineage) %>%
count()
mutation_dataset
mutation_dataset <- impact_dataset_all %>%
deduplicating(data = ., columns = c("variant_protein_sorted", "gene", "variant_lineage")) %>%
group_by(pos,variant_protein_sorted, variant_lineage) %>%
count()
mutation_dataset
View(mutation_dataset)
mutation_dataset <- impact_dataset_all %>%
deduplicating(data = ., columns = c("variant_protein_sorted", "gene", "variant_lineage")) %>%
group_by(pos,variant_protein_sorted, variant_lineage) %>%
count() %>%
ungroup()
View(mutation_dataset)
mutation_dataset <- impact_dataset_all %>%
deduplicating(data = ., columns = c("variant_protein_sorted", "gene", "variant_lineage")) %>%
group_by(pos,variant_protein_sorted, variant_lineage) %>%
count()
mutation_dataset <- impact_dataset_all %>%
deduplicating(data = ., columns = c("variant_protein_sorted", "gene", "variant_lineage")) %>%
group_by(pos,variant_protein_sorted) %>%
count()
# Plot
p <- ggplot(data, aes(x=x, y=y)) +
geom_segment(
aes(x=x, xend=x, y=0, yend=y),
color=ifelse(data$x %in% c("A","D"), "orange", "grey"),
size=ifelse(data$x %in% c("A","D"), 1.3, 0.7)
) +
geom_point(
color=ifelse(data$x %in% c("A","D"), "orange", "grey"),
size=ifelse(data$x %in% c("A","D"), 5, 2)
) +
coord_flip() +
theme(
legend.position="none"
) +
xlab("") +
ylab("Value of Y") +
ggtitle("How did groups A and D perform?")
# Create data
set.seed(1000)
data <- data.frame(
x=LETTERS[1:26],
y=abs(rnorm(26))
)
# Reorder the data
data <- data %>%
arrange(y) %>%
mutate(x=factor(x,x))
# Plot
p <- ggplot(data, aes(x=x, y=y)) +
geom_segment(
aes(x=x, xend=x, y=0, yend=y),
color=ifelse(data$x %in% c("A","D"), "orange", "grey"),
size=ifelse(data$x %in% c("A","D"), 1.3, 0.7)
) +
geom_point(
color=ifelse(data$x %in% c("A","D"), "orange", "grey"),
size=ifelse(data$x %in% c("A","D"), 5, 2)
) +
coord_flip() +
theme(
legend.position="none"
) +
xlab("") +
ylab("Value of Y") +
ggtitle("How did groups A and D perform?")
# Add annotation
p + annotate("text", x=grep("D", data$x), y=data$y[which(data$x=="D")]*1.2,
label="Group D is very impressive",
color="orange", size=4 , angle=0, fontface="bold", hjust=0) +
annotate("text", x = grep("A", data$x), y = data$y[which(data$x=="A")]*1.2,
label = paste("Group A is not too bad\n (val=",data$y[which(data$x=="A")] %>% round(2),")",sep="" ) ,
color="orange", size=4 , angle=0, fontface="bold", hjust=0)
# Plot
p <- ggplot(data, aes(x=x, y=y)) +
geom_segment(
aes(x=x, xend=x, y=0, yend=y),
color=ifelse(data$x %in% c("A","D"), "orange", "grey"),
size=ifelse(data$x %in% c("A","D"), 1.3, 0.7)
) +
geom_point(
color=ifelse(data$x %in% c("A","D"), "orange", "grey"),
size=ifelse(data$x %in% c("A","D"), 5, 2)
) +
theme(
legend.position="none"
) +
xlab("") +
ylab("Value of Y") +
ggtitle("How did groups A and D perform?")
# Add annotation
p + annotate("text", x=grep("D", data$x), y=data$y[which(data$x=="D")]*1.2,
label="Group D is very impressive",
color="orange", size=4 , angle=0, fontface="bold", hjust=0) +
annotate("text", x = grep("A", data$x), y = data$y[which(data$x=="A")]*1.2,
label = paste("Group A is not too bad\n (val=",data$y[which(data$x=="A")] %>% round(2),")",sep="" ) ,
color="orange", size=4 , angle=0, fontface="bold", hjust=0)
data
# Plot
p <- ggplot(mutation_dataset, aes(x=pos, y=n)) +
geom_segment(
aes(x=pos, xend=pos, y=0, yend=n),
color=ifelse(mutation_dataset$n > 10, "orange", "grey"),
size=ifelse(mutation_dataset$n > 10, 1.3, 0.7)
) +
geom_point(
color=ifelse(mutation_dataset$n > 10, "orange", "grey"),
size=ifelse(mutation_dataset$n > 10, 5, 2)
) +
theme(
legend.position="none"
) +
xlab("") +
ylab("Value of Y") +
ggtitle("How did groups A and D perform?")
p
# Add annotation
p + annotate("text", x=mutation_dataset$pos[which(mutation_dataset$n>10)], y=mutation_dataset$n[which(mutation_dataset$n>10)]*1.2,
label=mutation_dataset$variant_protein_sorted[which(mutation_dataset$n>10)],
color="orange", size=4 , angle=0, fontface="bold", hjust=0)
# Add annotation
p + annotate("text", x=ifelse(mutation_dataset$pos[which(mutation_dataset$n>10)]%%2 == 1, mutation_dataset$pos[which(mutation_dataset$n>10)]-2, mutation_dataset$pos[which(mutation_dataset$n>10)]+2), y=mutation_dataset$n[which(mutation_dataset$n>10)]*1.2,
label=mutation_dataset$variant_protein_sorted[which(mutation_dataset$n>10)],
color="orange", size=4 , angle=0, fontface="bold", hjust=0)
# Add annotation
p + annotate("text", x=ifelse(mutation_dataset$pos[which(mutation_dataset$n>10)]%%2 == 1, mutation_dataset$pos[which(mutation_dataset$n>10)]-10, mutation_dataset$pos[which(mutation_dataset$n>10)]+10), y=mutation_dataset$n[which(mutation_dataset$n>10)]*1.2,
label=mutation_dataset$variant_protein_sorted[which(mutation_dataset$n>10)],
color="orange", size=4 , angle=0, fontface="bold", hjust=0)
# Add annotation
p + annotate("text", x=ifelse(mutation_dataset$pos[which(mutation_dataset$n>10)]%%2 == 1, mutation_dataset$pos[which(mutation_dataset$n>10)]-1000, mutation_dataset$pos[which(mutation_dataset$n>10)]+1000), y=mutation_dataset$n[which(mutation_dataset$n>10)]*1.2,
label=mutation_dataset$variant_protein_sorted[which(mutation_dataset$n>10)],
color="orange", size=4 , angle=0, fontface="bold", hjust=0)
# Add annotation
p + annotate("text", x=ifelse(mutation_dataset$pos[which(mutation_dataset$n>10)]%%2 == 1, 10, mutation_dataset$pos[which(mutation_dataset$n>10)]+1000), y=mutation_dataset$n[which(mutation_dataset$n>10)]*1.2,
label=mutation_dataset$variant_protein_sorted[which(mutation_dataset$n>10)],
color="orange", size=4 , angle=0, fontface="bold", hjust=0)
# Add annotation
p + annotate("text", x=ifelse(is.odd(mutation_dataset$pos[which(mutation_dataset$n>10)]), 10, mutation_dataset$pos[which(mutation_dataset$n>10)]+1000), y=mutation_dataset$n[which(mutation_dataset$n>10)]*1.2,
label=mutation_dataset$variant_protein_sorted[which(mutation_dataset$n>10)],
color="orange", size=4 , angle=0, fontface="bold", hjust=0)
# Add annotation
p + annotate("text", x=pos, y=mutation_dataset$n[which(mutation_dataset$n>10)]*1.2,
label=mutation_dataset$variant_protein_sorted[which(mutation_dataset$n>10)],
color="orange", size=4 , angle=0, fontface="bold", hjust=0)
# Add annotation
p + annotate("text", x=mutation_dataset$pos, y=mutation_dataset$n[which(mutation_dataset$n>10)]*1.2,
label=mutation_dataset$variant_protein_sorted[which(mutation_dataset$n>10)],
color="orange", size=4 , angle=0, fontface="bold", hjust=0)
# Add annotation
p + annotate("text", x=mutation_dataset$n[which(mutation_dataset$n>10)], y=mutation_dataset$n[which(mutation_dataset$n>10)]*1.2,
label=mutation_dataset$variant_protein_sorted[which(mutation_dataset$n>10)],
color="orange", size=4 , angle=0, fontface="bold", hjust=0)
# Add annotation
p + annotate("text", x=mutation_dataset$pos[which(mutation_dataset$n>10)], y=mutation_dataset$n[which(mutation_dataset$n>10)]*1.2,
label=mutation_dataset$variant_protein_sorted[which(mutation_dataset$n>10)],
color="orange", size=4 , angle=0, fontface="bold", hjust=0)
# Add annotation
p + annotate("text", x=mutation_dataset$pos[which(mutation_dataset$n>10)], y=ifelse(mutation_dataset$pos[which(mutation_dataset$n>10)]%%2==1, mutation_dataset$n[which(mutation_dataset$n>10)]*1.2, mutation_dataset$n[which(mutation_dataset$n>10)]/1.2),
label=mutation_dataset$variant_protein_sorted[which(mutation_dataset$n>10)],
color="orange", size=4 , angle=0, fontface="bold", hjust=0)
# Add annotation
p + annotate("text", x=mutation_dataset$pos[which(mutation_dataset$n>10)], y=ifelse(mutation_dataset$pos[which(mutation_dataset$n>10)]%%2==1, mutation_dataset$n[which(mutation_dataset$n>10)]*1.2, mutation_dataset$n[which(mutation_dataset$n>10)]/1.6),
label=mutation_dataset$variant_protein_sorted[which(mutation_dataset$n>10)],
color="orange", size=4 , angle=0, fontface="bold", hjust=0)
install.packages('ggrepel')
library(ggrepel)
p + geom_text_repel(data=filter(mutation_dataset, n>10), aes(label=variant_protein_sorted)
p + geom_text_repel(data=filter(mutation_dataset, n>10), aes(label=variant_protein_sorted))
p + geom_text_repel(data=filter(mutation_dataset, n>10), aes(label=variant_protein_sorted))
